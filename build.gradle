buildscript {
    ext { // 여기서 사용하는 전역변수를 설정하겠다는 의미.
        springBootVersion = '2.1.9.RELEASE'   // spiring~Version이 전역변수이고 이 값이 2.1.7~ 이다.
    }
    repositories {
        mavenCentral() // 라이브러리 저장소 1번. 사용이 좀 쉽지 않다.
        jcenter()       // 라이브러리 저장소 2번. 사용이 그나마 편리하다.
    }
    dependencies { // 의존성관리를 위한 코드를 추가
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/**
 * 앞서 선언한 플러그인 의존성들을 적용할 것인지 결정하는 코드
 */
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management' // 스프링 부트의 의존성들을 관리해주는 플러그인


group 'org.example'
version '1.0.4-SNAPSHOT-'+new Date().format("yyyyMMddHHmmss")
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies { // 프로젝트 개발에 필요한 의존성들을 선언하는 곳.
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok') // 개터세터 기본생성자 쉽게 생성해주는 lombok.
    compile('org.springframework.boot:spring-boot-starter-data-jpa') // 스프링 데이터 JPA 추상화 라이브러리. 자동으로 JPA 관련 라이브러리 버전 관리해줌.
    compile('org.springframework.boot:spring-boot-starter-mustache')
    compile('com.h2database:h2') // 인메모리 관계형 데이터베이스. 애플리케이션 재시작 때마다 초기화 되므로 테스트용도로 많이 사용. 이 책에서는 JPA의 테스트,  로컬 환경에서의 구동에서 사용.

    compile('org.springframework.boot:spring-boot-starter-oauth2-client')
    compile('org.springframework.session:spring-session-jdbc')

    compile("org.mariadb.jdbc:mariadb-java-client")

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.springframework.security:spring-security-test")
}